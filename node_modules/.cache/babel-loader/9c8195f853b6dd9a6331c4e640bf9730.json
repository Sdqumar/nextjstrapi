{"ast":null,"code":"import { appConstants } from \"../constants\";\nimport { saveProductResponse } from \"../data\";\nimport { getProductCode } from \"../getProductCode\";\nexport const initialState = {\n  products: [],\n  errors: [],\n  contentSlots: []\n};\n\nconst appReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case appConstants.GET_CONTENT_SLOTS_SUCCESS:\n      return { ...state,\n        contentSlots: action.payload\n      };\n\n    case appConstants.UPLOAD_PRODUCT_SUCCESS:\n      return action.payload.reduce((state, _ref) => {\n        let {\n          productCode,\n          productName,\n          productCategory,\n          imageFile,\n          imageFileName,\n          imageUrl,\n          id\n        } = _ref;\n        const shouldUpdate = state.products.some(product => product.productCode === productCode);\n\n        if (shouldUpdate) {\n          return { ...state,\n            products: state.products.map(product => product.productCode === productCode ? { ...product,\n              productImages: product.productImages.concat({\n                imageFile,\n                imageFileName,\n                imageUrl,\n                id\n              })\n            } : product)\n          };\n        }\n\n        return { ...state,\n          products: state.products.concat({\n            productCode,\n            productName,\n            productCategory,\n            productExisting: true,\n            slot: [],\n            productImages: [{\n              imageFile,\n              imageFileName,\n              imageUrl,\n              id\n            }]\n          })\n        };\n      }, state);\n\n    case appConstants.VALIDATE_SUCCESS:\n      return { ...state,\n        errors: [...state.errors, ...action.payload.data.filter((data, idx) => {\n          return action.payload.images.some(image => data.id === image.imageFileName);\n        })]\n      };\n\n    case appConstants.UPDATE_PRODUCT_SUCCESS:\n      return { ...state,\n        products: state.products.map(product => {\n          product.productImages.some;\n        })\n      };\n\n    case appConstants.SAVE_PRODUCT_SUCCESS:\n      return saveProductResponse.reduce((state, current) => {\n        const shouldUpdate = state.products.some(product => product.productCode === getProductCode(current.name));\n        if (!shouldUpdate) return state;\n        return { ...state,\n          products: state.products.map(product => product.productCode === getProductCode(current.name) ? { ...product,\n            productCode: current.newProductCode,\n            productName: current.productName ? current.productName : \"\"\n          } : product)\n        };\n      }, state);\n\n    case appConstants.CHANGE_CONTENT_SLOTS:\n      return { ...state,\n        products: state.products.map(product => {\n          var _action$payload$produ;\n\n          const isMatches = product.productCode === ((_action$payload$produ = action.payload.product) === null || _action$payload$produ === void 0 ? void 0 : _action$payload$produ.productCode);\n          const isExist = product.slot.some(data => {\n            var _action$payload$slot;\n\n            return data.id === ((_action$payload$slot = action.payload.slot) === null || _action$payload$slot === void 0 ? void 0 : _action$payload$slot.id);\n          });\n\n          switch (true) {\n            case isMatches && isExist:\n              return { ...product,\n                slot: [...product.slot.filter(data => {\n                  var _action$payload$slot2;\n\n                  return data.id !== ((_action$payload$slot2 = action.payload.slot) === null || _action$payload$slot2 === void 0 ? void 0 : _action$payload$slot2.id);\n                }), action.payload.slot]\n              };\n\n            case isMatches && !isExist:\n              return { ...product,\n                slot: [...product.slot, action.payload.slot]\n              };\n\n            default:\n              return { ...product,\n                slot: []\n              };\n          }\n        })\n      };\n\n    case appConstants.SET_CONTENT_SLOT:\n      return { ...state\n      };\n\n    case appConstants.DELETE_IMAGE_SUCCESS:\n      return { ...state,\n        products: state.products.map(product => {\n          var _product$productImage;\n\n          return { ...product,\n            productImages: ((_product$productImage = product.productImages) !== null && _product$productImage !== void 0 ? _product$productImage : []).filter(_ref2 => {\n              let {\n                id\n              } = _ref2;\n              return !action.payload.includes(id);\n            })\n          };\n        })\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default appReducer;","map":{"version":3,"sources":["/workspace/nextjstrapi/src/reducers/productReducer.js"],"names":["appConstants","saveProductResponse","getProductCode","initialState","products","errors","contentSlots","appReducer","state","action","type","GET_CONTENT_SLOTS_SUCCESS","payload","UPLOAD_PRODUCT_SUCCESS","reduce","productCode","productName","productCategory","imageFile","imageFileName","imageUrl","id","shouldUpdate","some","product","map","productImages","concat","productExisting","slot","VALIDATE_SUCCESS","data","filter","idx","images","image","UPDATE_PRODUCT_SUCCESS","SAVE_PRODUCT_SUCCESS","current","name","newProductCode","CHANGE_CONTENT_SLOTS","isMatches","isExist","SET_CONTENT_SLOT","DELETE_IMAGE_SUCCESS","includes"],"mappings":"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","sourcesContent":["import { appConstants } from \"../constants\";\r\nimport { saveProductResponse } from \"../data\";\r\nimport { getProductCode } from \"../getProductCode\";\r\n\r\nexport const initialState = {\r\n  products: [],\r\n  errors: [],\r\n  contentSlots: []\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case appConstants.GET_CONTENT_SLOTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        contentSlots: action.payload\r\n      };\r\n    case appConstants.UPLOAD_PRODUCT_SUCCESS:\r\n      return action.payload.reduce(\r\n        (\r\n          state,\r\n          {\r\n            productCode,\r\n            productName,\r\n            productCategory,\r\n            imageFile,\r\n            imageFileName,\r\n            imageUrl,\r\n            id\r\n          }\r\n        ) => {\r\n          const shouldUpdate = state.products.some(\r\n            (product) => product.productCode === productCode\r\n          );\r\n\r\n          if (shouldUpdate) {\r\n            return {\r\n              ...state,\r\n              products: state.products.map((product) =>\r\n                product.productCode === productCode\r\n                  ? {\r\n                      ...product,\r\n                      productImages: product.productImages.concat({\r\n                        imageFile,\r\n                        imageFileName,\r\n                        imageUrl,\r\n                        id\r\n                      })\r\n                    }\r\n                  : product\r\n              )\r\n            };\r\n          }\r\n\r\n          return {\r\n            ...state,\r\n            products: state.products.concat({\r\n              productCode,\r\n              productName,\r\n              productCategory,\r\n              productExisting: true,\r\n              slot: [],\r\n              productImages: [\r\n                {\r\n                  imageFile,\r\n                  imageFileName,\r\n                  imageUrl,\r\n                  id\r\n                }\r\n              ]\r\n            })\r\n          };\r\n        },\r\n        state\r\n      );\r\n\r\n    case appConstants.VALIDATE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        errors: [\r\n          ...state.errors,\r\n          ...action.payload.data.filter((data, idx) => {\r\n            return action.payload.images.some(\r\n              (image) => data.id === image.imageFileName\r\n            );\r\n          })\r\n        ]\r\n      };\r\n\r\n    case appConstants.UPDATE_PRODUCT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        products: state.products.map((product) => {\r\n          product.productImages.some\r\n        })\r\n      };\r\n\r\n    case appConstants.SAVE_PRODUCT_SUCCESS:\r\n      return saveProductResponse.reduce((state, current) => {\r\n        const shouldUpdate = state.products.some(\r\n          (product) => product.productCode === getProductCode(current.name)\r\n        );\r\n\r\n        if (!shouldUpdate) return state;\r\n\r\n        return {\r\n          ...state,\r\n          products: state.products.map((product) =>\r\n            product.productCode === getProductCode(current.name)\r\n              ? {\r\n                  ...product,\r\n                  productCode: current.newProductCode,\r\n                  productName: current.productName ? current.productName : \"\"\r\n                }\r\n              : product\r\n          )\r\n        };\r\n      }, state);\r\n\r\n    case appConstants.CHANGE_CONTENT_SLOTS:\r\n      return {\r\n        ...state,\r\n        products: state.products.map((product) => {\r\n          const isMatches =\r\n            product.productCode === action.payload.product?.productCode;\r\n\r\n          const isExist = product.slot.some(\r\n            (data) => data.id === action.payload.slot?.id\r\n          );\r\n\r\n          switch (true) {\r\n            case isMatches && isExist:\r\n              return {\r\n                ...product,\r\n                slot: [\r\n                  ...product.slot.filter(\r\n                    (data) => data.id !== action.payload.slot?.id\r\n                  ),\r\n                  action.payload.slot\r\n                ]\r\n              };\r\n            case isMatches && !isExist:\r\n              return {\r\n                ...product,\r\n                slot: [...product.slot, action.payload.slot]\r\n              };\r\n            default:\r\n              return {\r\n                ...product,\r\n                slot: []\r\n              };\r\n          }\r\n        })\r\n      };\r\n\r\n    case appConstants.SET_CONTENT_SLOT:\r\n      return {\r\n        ...state\r\n      };\r\n\r\n    case appConstants.DELETE_IMAGE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        products: state.products.map((product) => ({\r\n          ...product,\r\n          productImages: (product.productImages ?? []).filter(\r\n            ({ id }) => !action.payload.includes(id)\r\n          )\r\n        }))\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default appReducer;\r\n"]},"metadata":{},"sourceType":"module"}