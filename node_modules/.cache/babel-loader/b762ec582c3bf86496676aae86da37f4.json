{"ast":null,"code":"var _jsxFileName = \"/workspace/nextjstrapi/src/components/MediaCard/index.js\";\nimport React from \"react\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { Card, CardContent, CardMedia, Box, Typography, TextField, Button } from \"@material-ui/core\";\nimport { useDispatch } from \"react-redux\";\nimport { changeProductSlots } from \"../../actions\";\nexport default function MediaCard(_ref) {\n  var _data$msg;\n\n  let {\n    data,\n    contentSlots,\n    dataProduct,\n    onSetContentSlot\n  } = _ref;\n  const d = useDispatch();\n  console.log(dataProduct);\n  console.log(contentSlots);\n  const mappedErrorMessage = data.hasError && ((_data$msg = data.msg) === null || _data$msg === void 0 ? void 0 : _data$msg.validationMessages.map(data => data.validationMessages)[0]);\n\n  const onChangeContentSlot = (slot, dp) => d(changeProductSlots({\n    id: data.imageFileName,\n    value: slot\n  }, dp));\n\n  return /*#__PURE__*/React.createElement(Card, {\n    style: {\n      border: data.hasError ? \"1px solid red\" : \"unset\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardMedia, {\n    component: \"img\",\n    height: \"140\",\n    image: (data === null || data === void 0 ? void 0 : data.imageFile) ? URL.createObjectURL(data.imageFile) : data.imageUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, data.imageFileName), data.hasError && mappedErrorMessage.map((msg, idx) => /*#__PURE__*/React.createElement(Box, {\n    key: idx + msg,\n    marginTop: idx === 0 ? 2 : 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  }, msg))), /*#__PURE__*/React.createElement(Autocomplete, {\n    fullWidth: true,\n    size: \"small\",\n    options: contentSlots,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Content Slots\",\n      variant: \"outlined\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    })),\n    getOptionLabel: option => option.name || \"\",\n    disableClearable: true,\n    onChange: (_, value) => onChangeContentSlot(value, dataProduct),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => onSetContentSlot(\"test\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Set Content Slot Value\")));\n}","map":{"version":3,"sources":["/workspace/nextjstrapi/src/components/MediaCard/index.js"],"names":["React","Autocomplete","Card","CardContent","CardMedia","Box","Typography","TextField","Button","useDispatch","changeProductSlots","MediaCard","data","contentSlots","dataProduct","onSetContentSlot","d","console","log","mappedErrorMessage","hasError","msg","validationMessages","map","onChangeContentSlot","slot","dp","id","imageFileName","value","border","imageFile","URL","createObjectURL","imageUrl","idx","params","option","name","_"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardMedia,\r\n  Box,\r\n  Typography,\r\n  TextField,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { changeProductSlots } from \"../../actions\";\r\n\r\nexport default function MediaCard({\r\n  data,\r\n  contentSlots,\r\n  dataProduct,\r\n  onSetContentSlot\r\n}) {\r\n  const d = useDispatch();\r\n  console.log(dataProduct);\r\n  console.log(contentSlots);\r\n\r\n  const mappedErrorMessage =\r\n    data.hasError &&\r\n    data.msg?.validationMessages.map((data) => data.validationMessages)[0];\r\n\r\n  const onChangeContentSlot = (slot, dp) =>\r\n    d(changeProductSlots({ id: data.imageFileName, value: slot }, dp));\r\n\r\n  return (\r\n    <Card\r\n      style={{\r\n        border: data.hasError ? \"1px solid red\" : \"unset\"\r\n      }}\r\n    >\r\n      <CardContent>\r\n        <CardMedia\r\n          component=\"img\"\r\n          height=\"140\"\r\n          image={\r\n            data?.imageFile\r\n              ? URL.createObjectURL(data.imageFile)\r\n              : data.imageUrl\r\n          }\r\n        />\r\n        <p>{data.imageFileName}</p>\r\n        {data.hasError &&\r\n          mappedErrorMessage.map((msg, idx) => (\r\n            <Box key={idx + msg} marginTop={idx === 0 ? 2 : 1}>\r\n              <Typography color=\"secondary\">{msg}</Typography>\r\n            </Box>\r\n          ))}\r\n        <Autocomplete\r\n          fullWidth\r\n          size=\"small\"\r\n          options={contentSlots}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              label=\"Content Slots\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n            />\r\n          )}\r\n          getOptionLabel={(option) => option.name || \"\"}\r\n          disableClearable={true}\r\n          onChange={(_, value) => onChangeContentSlot(value, dataProduct)}\r\n        />\r\n        <br />\r\n        <Button\r\n          type=\"button\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => onSetContentSlot(\"test\")}\r\n        >\r\n          Set Content Slot Value\r\n        </Button>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}